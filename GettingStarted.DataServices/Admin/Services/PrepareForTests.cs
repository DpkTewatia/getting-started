// --------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the SQL PLUS Code Generation Utility.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//     Underlying Routine: PrepareForTests
//     Last Modified On: 2/28/2023 6:03:37 PM
//     Written By: Author
//     Visit https://www.SQLPLUS.net for more information about the SQL PLUS build time ORM.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------
namespace GettingStarted.DataServices.Admin
{
    #nullable enable

    #region Using Statments

    using GettingStarted.DataServices.Admin.Models;
    using System;
    using System.Data;
    using System.Data.SqlClient;
    using System.Threading;

    #endregion Using Statements

    /// <summary>
    /// This file contains the source code for the PrepareForTests routine.
    /// </summary>
    public partial class Service
    {
        #region Build SqlCommand

        private SqlCommand PrepareForTests_BuildCommand(SqlConnection cnn)
        {
            SqlCommand result = new SqlCommand()
            {
                CommandType = CommandType.StoredProcedure,
                CommandText = "[admin].[PrepareForTests]",
                Connection = cnn
            };

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@ReturnValue",
                Direction = ParameterDirection.ReturnValue,
                SqlDbType = SqlDbType.Int,
                Scale = 0,
                Precision = 10,
                Value = DBNull.Value
            });

            return result;
        }

        #endregion Build SqlCommand

        #region Read Output Parameters And Return Value

        private void PrepareForTests_SetParameters(SqlCommand cmd, PrepareForTestsOutput output)
        {
            if(cmd.Parameters[0].Value != DBNull.Value)
            {
                output.ReturnValue = (int?)cmd.Parameters[0].Value;
            }
        }

        #endregion Read Output Parameters And Return Value

        #region Execute Command

        private void PrepareForTests_Execute(SqlCommand cmd, PrepareForTestsOutput output)
        {
            cmd.ExecuteNonQuery();

            PrepareForTests_SetParameters(cmd, output);
        }

        #endregion Execute Command

        #region Public Service

        /// <summary>
        /// Clears the customer table<br/>
        /// DB Routine: admin.PrepareForTests<br/>
        /// Author: Author<br/>
        /// </summary>
        /// <returns>Instance of PrepareForTestsOutput</returns>
        public PrepareForTestsOutput PrepareForTests()
        {
            PrepareForTestsOutput output = new PrepareForTestsOutput();
			if(sqlConnection != null)
            {
                using (SqlCommand cmd = PrepareForTests_BuildCommand(sqlConnection))
                {
                    cmd.Transaction = sqlTransaction;
                    PrepareForTests_Execute(cmd, output);
                }
                return output;
            }
            for(int idx=0; idx <= retryOptions.RetryIntervals.Count; idx++)
            {
                if (idx > 0)
                {
                    Thread.Sleep(retryOptions.RetryIntervals[idx - 1]);
                }
                try
                {
                    using (SqlConnection cnn = new SqlConnection(connectionString))
                    using (SqlCommand cmd = PrepareForTests_BuildCommand(cnn))
                    {
                        cnn.Open();
						PrepareForTests_Execute(cmd, output);
                        cnn.Close();
                    }
					break;
                }
                catch(SqlException sqlException)
                {
                    AllowRetryOrThrowError(idx, sqlException);
                }
            }
            return output;
        }

        #endregion

    }
}

