// --------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the SQL PLUS Code Generation Utility.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//     Underlying Routine: CustomerQuery
//     Last Modified On: 2/28/2023 5:47:33 PM
//     Written By: Alan@SQLPlus.net
//     Visit https://www.SQLPLUS.net for more information about the SQL PLUS build time ORM.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------
namespace GettingStarted.DataServices.Good
{
    #nullable enable

    #region Using Statments

    using GettingStarted.DataServices.Good.Models;
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.SqlClient;
    using System.Threading;

    #endregion Using Statements

    /// <summary>
    /// This file contains the source code for the CustomerQuery routine.
    /// </summary>
    public partial class Service
    {
        #region Build SqlCommand

        private SqlCommand CustomerQuery_BuildCommand(SqlConnection cnn, CustomerQueryInput input)
        {
            SqlCommand result = new SqlCommand()
            {
                CommandType = CommandType.StoredProcedure,
                CommandText = "[good].[CustomerQuery]",
                Connection = cnn
            };

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@ReturnValue",
                Direction = ParameterDirection.ReturnValue,
                SqlDbType = SqlDbType.Int,
                Scale = 0,
                Precision = 10,
                Value = DBNull.Value
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@FirstName",
                Direction = ParameterDirection.Input,
                SqlDbType = SqlDbType.VarChar,
                Size = 64,
                Value = DBNull.Value
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@LastName",
                Direction = ParameterDirection.Input,
                SqlDbType = SqlDbType.VarChar,
                Size = 64,
                Value = DBNull.Value
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@Email",
                Direction = ParameterDirection.Input,
                SqlDbType = SqlDbType.VarChar,
                Size = 64,
                Value = DBNull.Value
            });

            if (input.FirstName != null)
            {
                result.Parameters["@FirstName"].Value = input.FirstName;
            }
            if (input.LastName != null)
            {
                result.Parameters["@LastName"].Value = input.LastName;
            }
            if (input.Email != null)
            {
                result.Parameters["@Email"].Value = input.Email;
            }
            return result;
        }

        #endregion Build SqlCommand

        #region Read Output Parameters And Return Value

        private void CustomerQuery_SetParameters(SqlCommand cmd, CustomerQueryOutput output)
        {
            if(cmd.Parameters[0].Value != DBNull.Value)
            {
                output.ReturnValue = (int?)cmd.Parameters[0].Value;
            }
        }

        #endregion Read Output Parameters And Return Value

        #region Reader To Result Objects
        
        private CustomerQueryResult CustomerQuery_ResultData(SqlDataReader rdr)
        {
            return new CustomerQueryResult(
            rdr.GetInt32(0),
            rdr.GetString(1),
            rdr.GetString(2),
            rdr.GetString(3)
            );
        }
    
        #endregion Reader To Result Objects

        #region Execute Command

        private void CustomerQuery_Execute(SqlCommand cmd, CustomerQueryOutput output)
        {
            using (SqlDataReader rdr = cmd.ExecuteReader())
            {
                output.ResultData = new List<CustomerQueryResult>();
                while(rdr.Read())
                {
                    output.ResultData.Add(CustomerQuery_ResultData(rdr));
                }
                rdr.Close();
            }

            CustomerQuery_SetParameters(cmd, output);
        }

        #endregion Execute Command

        #region Public Service

        /// <summary>
        /// Queries customers for the given search query values.<br/>
        /// DB Routine: good.CustomerQuery<br/>
        /// Author: Alan@SQLPlus.net<br/>
        /// </summary>
        /// <param name="input">CustomerQueryInput instance.</param>
        /// <returns>Instance of CustomerQueryOutput</returns>
        public CustomerQueryOutput CustomerQuery(CustomerQueryInput input)
        {
            ValidateInput(input, nameof(CustomerQuery));
            CustomerQueryOutput output = new CustomerQueryOutput();
			if(sqlConnection != null)
            {
                using (SqlCommand cmd = CustomerQuery_BuildCommand(sqlConnection, input))
                {
                    cmd.Transaction = sqlTransaction;
                    CustomerQuery_Execute(cmd, output);
                }
                return output;
            }
            for(int idx=0; idx <= retryOptions.RetryIntervals.Count; idx++)
            {
                if (idx > 0)
                {
                    Thread.Sleep(retryOptions.RetryIntervals[idx - 1]);
                }
                try
                {
                    using (SqlConnection cnn = new SqlConnection(connectionString))
                    using (SqlCommand cmd = CustomerQuery_BuildCommand(cnn, input))
                    {
                        cnn.Open();
						CustomerQuery_Execute(cmd, output);
                        cnn.Close();
                    }
					break;
                }
                catch(SqlException sqlException)
                {
                    AllowRetryOrThrowError(idx, sqlException);
                }
            }
            return output;
        }

        #endregion

    }
}

