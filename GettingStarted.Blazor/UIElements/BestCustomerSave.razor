@using GettingStarted.DataServices.Best.Models;
<div class="container w-75">
    <div class="mx-auto shadow p-5 rounded">
        <h2 class="text-center mb-5">Edit (Best) Customer</h2>
        <div class="mb-4">
            <Dismissable Message="@ErrorMessage" OnCloseClick="()=> ErrorMessage = null" />
            <EditForm OnValidSubmit="OnSubmit" EditContext="_EditContext">
                <DataAnnotationsValidator />
                <input type="hidden" @bind=Input!.CustomerId />
                <div class="form-group mb-3">
                    <label>First Name:</label>
                    <InputText @bind-Value=Input!.FirstName class="form-control" />
                    <ValidationMessage For="()=> Input.FirstName" />
                </div>
                <div class="form-group mb-3">
                    <label>Last Name:</label>
                    <InputText @bind-Value=Input!.LastName class="form-control" />
                    <ValidationMessage For="()=> Input.LastName" />
                </div>
                <div class="form-group mb-3">
                    <label>Email:</label>
                    <InputText @bind-Value=Input!.Email class="form-control" />
                    <ValidationMessage For="()=> Input.Email" />
                </div>
                <div class="d-flex justify-content-between">
                    <button class="btn btn-outline-secondary w-25" @onclick="OnCancel">Cancel</button>
                    <button type="submit" class="btn btn-primary w-25">Save</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {

    private CustomerSaveInput? _Input;
    private EditContext? _EditContext;

    [Parameter]
    public CustomerSaveInput? Input
    {
        set
        {
            _Input = value;
            if (_Input is not null)
            {
                _EditContext = new EditContext(_Input);
            }
        }
        get
        {
            return _Input;
        }
    }

    [Parameter]
    public EventCallback OnCancelClick { set; get; }

    [Parameter]
    public EventCallback OnSubmitClick { set; get; }

    [Parameter]
    public string? ErrorMessage { set; get; }

    private async Task OnSubmit()
    {
        await OnSubmitClick.InvokeAsync();
    }

    private async Task OnCancel()
    {
        await OnCancelClick.InvokeAsync();
    }
}
